%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Supplementary Code for Perl et al. 2019
%%%
%%% This script loads a database containing all network measurements
%%% computed over all EEG wavebands and plots bar graps that contrast these
%%% measurements over inhalae and exhalae conditions.
%%%
%%% These results correspond to Figure 2 in the manuscript
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


clear
close all

load('Dataset_allResults_beta1and2_networks3.mat')

space = 30
toSave = 0 %toggle
TextLbels = 0 %toggle
STARTIDX  = [1 60+1 (60*2)+1 (60*3)+1 (60*4)+1] %spacing of database

%th %a %b1
for BAND =  1:5 % go over bands
    h = figure(BAND) % generate figure per band
    set(h,'Units','Inches');
    hold all
    START = STARTIDX(BAND)
    
    rmv = [17] % as stated in the manuscrupt, one subject had to be removed
    %"Network measurements of one subject were extremely skewed suggesting
    %possible corruption of the data during acquisition and were therefore discarded"
    
    D(rmv,:) = [];
    measIdxCounter = 0;
    
    for measIdx = 1:5 %go over network meas.
        measIdxCounter = measIdxCounter+1;
        ColStart_IN = START + (measIdxCounter-1)*6;
        ColStart_EX = ColStart_IN + space;
        
        cIN = [1 0.4 0]; %colormap
        cEX = [0 0.4 1 ];%colormap
        
        Dm = mean(D);
        Dstd = std(D,0,1);
        Dse = (Dstd / (size(D,1) - 1 ).^0.5);
        
        
        if measIdx == 1  %generate a text message at bottom of image
            anno= annotation('textbox',...
                [0 0 0.1 0.05],...
                'String',strcat('removed:subj', num2str(rmv)),...
                'FontSize',10);
            set(anno, 'Interpreter', 'none');
            anno.Color = [1  0 0 ]
        end
        
        %plot the figure
        
        f = gcf
        f.Color = [1 1 1 ]
        a = gca
        subplot(4,3,measIdxCounter)
        drawnow
        hold all

        %padded are generated by adding zeros between bars for better visualization
        vectorBar_IN = [Dm(ColStart_IN:ColStart_IN+5)];
        vectorBar_IN_padded = [vectorBar_IN(1) 0 vectorBar_IN(2) 0 vectorBar_IN(3) 0 vectorBar_IN(4) 0 vectorBar_IN(5) 0  vectorBar_IN(6) 0 ];
        vectorBar_EX = [Dm(ColStart_EX:ColStart_EX+5)];
        vectorBar_EX_padded = [0 vectorBar_EX(1) 0 vectorBar_EX(2) 0 vectorBar_EX(3) 0 vectorBar_EX(4) 0 vectorBar_EX(5) 0  vectorBar_EX(6)  ];
        
        %plot bars
        b1 = bar(vectorBar_IN_padded);
        b1.FaceColor = [cIN];
        b1.FaceAlpha = 0.8;
        b1.EdgeColor = [1 1 1 ];
        b2 = bar(vectorBar_EX_padded);
        b2.FaceColor = [cEX];
        b2.FaceAlpha = 0.8;
        b2.EdgeColor = [1 1 1 ];
        
        
        Dse1_padded = [Dse(ColStart_IN) 0 Dse(ColStart_IN+1) 0  Dse(ColStart_IN+2) 0 Dse(ColStart_IN+3) 0 Dse(ColStart_IN+4) 0 Dse(ColStart_IN+5) 0 ];
        eb1 = errorbar(vectorBar_IN_padded,Dse1_padded);
        eb1.LineStyle = 'none';
        eb1.Color  = cIN;
        Dse2_padded = [0 Dse(ColStart_EX) 0 Dse(ColStart_EX+1) 0  Dse(ColStart_EX+2) 0 Dse(ColStart_EX+3) 0 Dse(ColStart_EX+4) 0 Dse(ColStart_EX+5)  ];
        eb2 = errorbar(vectorBar_EX_padded,Dse2_padded);
        eb2.LineStyle = 'none';
        eb2.Color  = cEX;
        
        ttl = title(strcat(freqlabels{ColStart_IN} ,'::' ,  measlabels{ColStart_IN}));
        ttl.Interpreter = 'none';
        set(gca,'XTickLabel', {'5' , '10' , '15' , '20' , '25' , '30'},...
            'XTick',[1:6], 'fontsize' ,10);
        xlabel('Avg Density');
        ylabel(strcat( measlabels{ColStart_IN} , {' '}, 'index'));
        
        %add p values displayed on top
        hangPvals = Dm(ColStart_IN:ColStart_IN+5)+Dse(ColStart_IN:ColStart_IN+5)+0.05*mean(Dm(ColStart_IN:ColStart_IN+5)+Dse(ColStart_IN:ColStart_IN+5)); % max(Dm(ColStart_IN:ColStart_IN+4))
        
        
        counter = 0 ;
        
        for i = 1:6 %go over network meas.
            
            if i > 1
                counter = counter +  1 ;
            end
            
            %conduct repeated measures t-tests between IN/EX
            [h(i) p(i)] = ttest(D(:,ColStart_IN+counter) , D(:,ColStart_EX+counter));
            
            if measIdx == 3
                spacertext = 40;
            else
                spacertext = i;
            end
            
            % add "*" symbols were appropriate
            if p(i) < 0.05
                text( i*1.5-0.1 , hangPvals(i) , '*' ,'fontsize' , 16)
            end
            if p(i) < 0.01
                text( i*1.5-0.1+0.1+0.1 , hangPvals(i) , '*' ,'fontsize' , 16)
            end
            if p(i) < 0.001
                text( i*1.5-0.1+0.3 , hangPvals(i) , '*' ,'fontsize' , 16)
            end
            
            %add text labels with numerical values
            if TextLbels == 1
                maxtestloc = max(D(:,ColStart_IN+counter));
                
                text( 6 ,  maxtestloc - maxtestloc/6, strcat(num2str(i),':IN=',num2str(mean(D(:,ColStart_IN+counter)))...
                    , '+-' ,num2str(std(D(:,ColStart_IN+counter))),    ' / EX=',num2str(mean(D(:,ColStart_EX+counter)))...
                    , '+-' ,num2str(std(D(:,ColStart_EX+counter))) , {' '} , 'pv=' , num2str(p(i))) , 'fontsize' , 6)
            end
        end
    end
    
    tempsavename = strcat(freqlabels{ColStart_IN}, '_Removed-subj_' , num2str(rmv),'FINAL');
    
    if toSave == 1
        print(gcf, strcat(tempsavename, '.png'), '-dpng' ,'-r300')
    end
    
end